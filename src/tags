!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
>	Main.idr	/^        Just exec <- pure $ !chezExec <|> !schemeExec <|> !envExec$/;"	c
Subcommands	Main.idr	/^    Subcommands:$/;"	d
\nUsage	Main.idr	/^  \\nUsage: idv <subcommand>$/;"	d
bootstrapBuild	Main.idr	/^bootstrapBuild : HasIO io => (resolvedVersion : Version) -> (buildPrefix : String) -> io ()$/;"	d
build	Main.idr	/^build : HasIO io => (idrisExecutable : Version) -> (installedDir : String) -> (buildPrefix : String) -> io Bool$/;"	d
buildAndInstall	Main.idr	/^buildAndInstall : HasIO io => Version -> (cleanAfter : Bool) -> io ()$/;"	d
buildPrefix	IdvPaths.idr	/^buildPrefix : Version -> String$/;"	d
buildSelectedFn	Main.idr	/^      buildSelectedFn : (selectedVersion : Maybe Version) $/;"	d
changeDirAndCheckout	Main.idr	/^        changeDirAndCheckout : io (Maybe (Either String ()))$/;"	d
checkLocation	Main.idr	/^      checkLocation : Maybe String -> io (Maybe String)$/;"	d
checkout	Git.idr	/^checkout : HasIO io => (tag : String) -> io Bool$/;"	d
checkoutAndPullBranch	Git.idr	/^checkoutAndPullBranch : HasIO io => (branch : String) -> io Bool$/;"	d
checkoutIfAvailable	Main.idr	/^checkoutIfAvailable : HasIO io => Version -> io (Either String ())$/;"	d
chezExec	Main.idr	/^      chezExec : io (Maybe String)$/;"	d
clean	Main.idr	/^clean : HasIO io => io Bool$/;"	d
cleanAndBuild	Main.idr	/^cleanAndBuild : HasIO io $/;"	d
clone	Git.idr	/^clone : HasIO io => (repoURL : String) -> (path : String) -> io Bool$/;"	d
cloneIfNeeded	Git.idr	/^cloneIfNeeded : HasIO io => (repoURL : String) -> (path : String) -> io Bool$/;"	d
createDirIfNeeded	System/Directory/Extra.idr	/^createDirIfNeeded : HasIO io => (path : String) -> io Bool$/;"	d
createVersionsDir	Main.idr	/^createVersionsDir : HasIO io => Version -> io ()$/;"	d
defaultIdris2Location	IdvPaths/Generated.idr	/^defaultIdris2Location : String$/;"	d
defaultPath	Main.idr	/^      defaultPath : io (Maybe String)$/;"	d
dropPrefix	Data/Version.idr	/^    dropPrefix : String -> String$/;"	d
eatOutput	System/Console/Extra.idr	/^eatOutput : HasIO io => (ignoreStdErr : Bool) -> (cmd : String) -> io Bool$/;"	d
envExec	Main.idr	/^      envExec : io (Maybe String)$/;"	d
exitError	Main.idr	/^exitError : HasIO io => String -> io a$/;"	d
exitSuccess	Main.idr	/^exitSuccess : HasIO io => String -> io a$/;"	d
fetch	Git.idr	/^fetch : HasIO io => io Bool$/;"	d
fetchAndListVersions	Git.idr	/^fetchAndListVersions : HasIO io => io (List Version)$/;"	d
getSelectedVersion	Installed.idr	/^getSelectedVersion : HasIO io => io (Maybe Version)$/;"	d
getVersion	Installed.idr	/^getVersion : HasIO io => (idrisExecPath : String) -> io (Maybe Version)$/;"	d
go	Data/Version.idr	/^    go : List Version $/;"	d
go	Main.idr	/^      go : io Bool$/;"	d
handleSubcommand	Main.idr	/^handleSubcommand : HasIO io => List String -> io Bool$/;"	d
idrisRepoURL	IdvPaths.idr	/^idrisRepoURL : String$/;"	d
idrisSymlinkedPath	IdvPaths.idr	/^idrisSymlinkedPath : String$/;"	d
idvLocation	IdvPaths/Generated.idr	/^idvLocation : String$/;"	d
ignoreOutput	System/Console/Extra.idr	/^ignoreOutput : HasIO io => (cmd : String) -> io Int$/;"	d
ignoreStdErr	System/Console/Extra.idr	/^ignoreStdErr : String$/;"	d
ignoreStdOut	System/Console/Extra.idr	/^ignoreStdOut : String$/;"	d
inDir	System/Directory/Extra.idr	/^inDir : HasIO io => (path : String) -> io a -> io (Maybe a)$/;"	d
install	Main.idr	/^install : HasIO io $/;"	d
installApi	Main.idr	/^installApi : HasIO io => io ()$/;"	d
installCommand	Main.idr	/^installCommand : HasIO io => (versionStr : String) -> (cleanAfter : Bool) -> io ()$/;"	d
installedIdrisPath	IdvPaths.idr	/^installedIdrisPath : Version -> String$/;"	d
listTags	Git.idr	/^listTags : HasIO io => io (List String)$/;"	d
listVersions	Git.idr	/^listVersions : HasIO io => io (List Version)$/;"	d
listVersions	Installed.idr	/^listVersions : HasIO io => io (Maybe (List Version))$/;"	d
listVersionsCommand	Main.idr	/^listVersionsCommand : HasIO io => io ()$/;"	d
main	Main.idr	/^main : IO ()$/;"	d
nonEmpty	Data/Version.idr	/^    nonEmpty : String -> Maybe String$/;"	d
parseFolderEntries	Installed.idr	/^      parseFolderEntries : List String -> List Version$/;"	d
parseSpokenVersion	Data/Version.idr	/^parseSpokenVersion : String -> Maybe Version$/;"	d
parseVersion	Data/Version.idr	/^parseVersion : String -> Maybe Version$/;"	d
pathExpansion	System/Directory/Extra.idr	/^pathExpansion : HasIO io => (path : String) -> io (Maybe String)$/;"	d
prereleaseIdentifier	Data/Version.idr	/^  prereleaseIdentifier : Maybe String$/;"	d
printVersion	Main.idr	/^      printVersion : (Bool, Maybe Version, Maybe Version) -> String$/;"	d
pull	Git.idr	/^pull : HasIO io => io Bool$/;"	d
readLines	System/Console/Extra.idr	/^readLines : HasIO io => Fuel -> (ignoreStdErr : Bool) -> (cmd : String) -> io (List String)$/;"	d
readLines'	System/Console/Extra.idr	/^    readLines' : Fuel -> File -> List String -> io (List String)$/;"	d
redirectStdErr	System/Console/Extra.idr	/^redirectStdErr : String$/;"	d
relativeBinPath	IdvPaths.idr	/^relativeBinPath : String$/;"	d
relativeCheckoutPath	IdvPaths.idr	/^relativeCheckoutPath : String$/;"	d
relativeVersionsPath	IdvPaths.idr	/^relativeVersionsPath : String$/;"	d
replaceUnderscores	Installed.idr	/^      replaceUnderscores : String -> String$/;"	d
repoExists	Git.idr	/^repoExists : HasIO io => io Bool$/;"	d
res	Git.idr	/^checkout tag = [ res == 0 | res <- ignoreOutput "git checkout \\{tag}" ]$/;"	c
res	Git.idr	/^fetch = [ res == 0 | res <- ignoreOutput "git fetch --tags" ]$/;"	c
res	Git.idr	/^pull = [ res == 0 | res <- ignoreOutput "git pull --tags" ]$/;"	c
res	Main.idr	/^clean = [ res == 0 | res <- system "make clean" ]$/;"	c
res	System/File/Extra.idr	/^  [ res == 0 | res <- if isWindows$/;"	c
run	Main.idr	/^run : IO ()$/;"	d
schemeExec	Main.idr	/^      schemeExec : io (Maybe String)$/;"	d
selectAndCheckout	Main.idr	/^selectAndCheckout : HasIO io => (versionStr : String) -> io Bool$/;"	d
selectCommand	Main.idr	/^selectCommand : HasIO io => (versionStr : String) -> io ()$/;"	d
selectSystemCommand	Main.idr	/^selectSystemCommand : HasIO io => io ()$/;"	d
selectVersion	Installed.idr	/^selectVersion : HasIO io => Version -> io (Either String ())$/;"	d
symlink	System/File/Extra.idr	/^symlink : HasIO io => (from : String) -> (to : String) -> io Bool$/;"	d
systemIdrisPath	Main.idr	/^systemIdrisPath : HasIO io => io (Maybe String)$/;"	d
tag	Data/Version.idr	/^  tag : String$/;"	d
undoSelect	Installed.idr	/^      undoSelect : (previous : Maybe Version) -> io (Either String ())$/;"	d
unselect	Installed.idr	/^unselect : HasIO io => io (Either String ())$/;"	d
updateMainBranch	Main.idr	/^updateMainBranch : HasIO io => io ()$/;"	d
vectCompare	Data/Version.idr	/^      vectCompare : Vect 3 Nat -> Vect 3 Nat -> Ordering$/;"	d
version	Data/Version.idr	/^version : (tag : String) -> (prereleaseIdentifier : Maybe String) -> Vect 3 Nat -> Version$/;"	d
versionDirName	IdvPaths.idr	/^versionDirName : Version -> String$/;"	d
versionFolders	Installed.idr	/^      versionFolders : (path : String) -> io (Maybe (List String))$/;"	d
versionPath	IdvPaths.idr	/^versionPath : Version -> String$/;"	d
versions	Installed.idr	/^      versions : (path : String) -> io (Maybe (List Version))$/;"	d
versionsDir	Installed.idr	/^versionsDir : String$/;"	d
withVersion	Installed.idr	/^withVersion : HasIO io => Version -> io (Either String a) -> io (Either String a)$/;"	d
zipMatch	Data/Version.idr	/^zipMatch : List Version -> List Version -> List (Maybe Version, Maybe Version)$/;"	d
||	Data/Version.idr	/^  ||| If the version is pre-release, the part of the version string following$/;"	c
||	Data/Version.idr	/^  ||| The full tag of the version. In the context of git this is exactly the$/;"	c
||	Data/Version.idr	/^  ||| a dash (e.g. 'alpha.1' in 0.1.0-alpha.1).$/;"	c
||	Data/Version.idr	/^  ||| git tag. Elsewhere this field might hold other meaning.$/;"	c
